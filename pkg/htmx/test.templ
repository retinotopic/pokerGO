package htmxtempl

templ Imphtmx() {
    <head>
        <script src="https://unpkg.com/htmx.org@1.9.9"></script>
        <script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>
        <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
        <script src="https://unpkg.com/htmx.org/dist/ext/client-side-templates.js"></script>
    </head>
}

templ Pagemain() {
    @Imphtmx()
    <button hx-get="/startgame" hx-target="this" hx-swap="outerHTML" hx-replace-url="true">
        Create quick game
    </button>
}

templ Turner(strr string) {
    @Imphtmx()
    <div id="wsid" hx-ext="ws" ws-connect={strr} x-data="{ open: false , count: -1 }">

        <template id="PlayerPlace">
            <span>Name</span>
            <span>Stack</span>
        </template>

        <template id="PlayerButton">
            <button x-on:click="open = ! open" onclick="handleClickId(this.id)">
                Take seat
            </button>
        </template>

        <template id="TemplateLeave">
            <button id="LeaveSeat" onclick="LeaveSeat()" ws-send>
                Leave seat
            </button>
        </template>

        <template id="TemplateStart">
            <button id="StartGame" onclick="StartGame()" ws-send>
                Leave seat
            </button>
        </template>

        <div id="0">
            <button id="0" x-on:click="open = ! open" onclick="handleClickId(this.parentElement.id)">
                Take seat
            </button>
        </div>

        <div id="1">
            <button x-on:click="open = ! open" onclick="handleClickId(this.parentElement.id)">
                Take seat
            </button>
        </div>

        <div id="2">
            <button x-on:click="open = ! open" onclick="handleClickId(this.parentElement.id)">
                Take seat
            </button>
        <div>

        <div id="3">
            <button x-on:click="open = ! open" onclick="handleClickId(this.parentElement.id)">
                Take seat
            </button>
        <div>

        <div id="4">
            <button x-on:click="open = ! open" onclick="handleClickId(this.parentElement.id)">
                Take seat
            </button>
        <div>
        
        <div id="5">
            <button x-on:click="open = ! open" onclick="handleClickId(this.parentElement.id)">
                Take seat
            </button>
        <div>

        <div id="StartDiv">
            <button onclick="StartGame()">
                Take seat
            </button>
        <div>

        <div id="LeaveDiv">
            <button onclick="handleClickId(this.id)">
                Take seat
            </button>
        <div>

        <form x-data x-show.important="open" name="myForm" ws-send>
            <input id="Name" Enter your name required />
            <input id="Stack" type="number" Enter your wished stack required pattern="[0-9]*" inputmode="numeric" />
            <button x-on:click="open = ! open"> Send data </button>      
        </form>


        <script defer x-data>
            var placecnt = -1;
            var isact = false;
            var isgame = false;
            function handleClickId(cnt) {
                placecnt = cnt;
                isact = true
            }
            function LeaveSeat() {
                isact = false
            }
            function StartGame() {
                isgame = true
            }
            function removeIfExists (selector) {
                var x = document.querySelector(selector);
                if (x) x.remove();
            }
            function addIfNotExists (selector,playerN,playerS) {
                var x = document.querySelector(selector);
                if (!x) {
                    plpl.children[0].textContent = playerN;
                    plpl.children[1].textContent = playerS;
                    pllv = document.getElementById("TemplateLeave").content.firstElementChild.cloneNode(true);
                    document.getElementById("wsid").appendChild(pllv);
                }
            }
            htmx.on('htmx:wsBeforeMessage', (event) => { <!-- Receiving messages -->
                player = JSON.parse(event.detail.message);
                console.log(player);
                console.log(player.Place);
                if (player.IsGame === true) {
                    console.log('aboba');
                } else {
                    let str;
                    let plpl;
                    if (player.IsActive === true) {
                        str = "PlayerPlace";
                    } else {
                        str = "PlayerButton";
                    }
                    plpl = document.getElementById(str).content.firstElementChild.cloneNode(true);
                    console.log(plpl);
                    plpl.id = player.Place;
                    if (player.IsActive === true) {
                        addIfNotExists("#LeaveSeat",player.Name,player.Stack)
                    } else {
                        removeIfExists("#LeaveSeat")
                    }
                    if (player.IsAdmin === true) {
                        pllvs = document.getElementById("TemplateStart").content.firstElementChild.cloneNode(true);
                        document.getElementById("wsid").appendChild(pllvs);
                    }
                    document.getElementById(player.Place).replaceWith(plpl);
                }


            });
            htmx.on('htmx:wsBeforeSend', (event) => { <!-- Sending messages -->
                let stack = Number(document.getElementById("Stack").value)
                let name = document.getElementById("Name").value
                event.detail.socketWrapper.send(   JSON.stringify({'Name':name,'Stack':stack,'Place':Number(placecnt),'IsActive':isact,'IsGame':isgame}))
            });
        </script>
    </div>
}
templ Refresh(mls string) {
    <head>
        <meta http-equiv="refresh" content={mls} />
    </head>
    <b> loading... </b>
}